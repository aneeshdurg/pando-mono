# SPDX-License-Identifier: MIT
# Copyright (c) 2023. University of Texas at Austin. All rights reserved.

name: Docker / Ubuntu 22.04 / PREP / gasnet-smp-par
run-name: docker-prep-smp-ubuntu-2204 performed by @${{ github.actor }}

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prep-smp-ubuntu-2204-docker:
    name: gcc / ${{ matrix.build-type }} / ${{ matrix.sanitizer-type }}
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io/amdresearch
      ROOT_IMAGE_NAME: pando-rt
      IMAGE_NAME: pando
      CONTAINER_SRC_DIR: "/pando"
      CONTAINER_BUILD_DIR: "/pando/dockerbuild"
      CONTAINER_WORK_DIR: "/pando"
      INTERACTIVE: ""
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        build-type: ['Release', 'RelWithDebInfo']
        sanitizer-type: ['nosan', 'asan', 'ubsan']
        exclude:
          - build-type: 'Release'
            sanitizer-type: 'asan'
          - build-type: 'Release'
            sanitizer-type: 'ubsan'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        lfs: 'true'
        token: ${{ secrets.CI_PAT }}
        submodules: recursive
    - name: Set up environment variables
      timeout-minutes: 1
      run: |
        echo "UNAME=$(whoami)" >> $GITHUB_ENV
        echo "UID=$(id -u)" >> $GITHUB_ENV
        echo "GID=$(id -g)" >> $GITHUB_ENV
        echo "SRC_DIR=$(pwd)" >> $GITHUB_ENV
        echo "IMAGE_VERSION=$(git log --pretty="%h" -1 Dockerfile.dev)" >> $GITHUB_ENV
        echo "ROOT_IMAGE_VERSION=$(cd pando-rt/ && git log --pretty="%h" -1 docker)" >> $GITHUB_ENV
        if [ ${{ matrix.sanitizer-type }} == 'asan' ]; then
          echo "PANDO_TEST_DISCOVERY_TIMEOUT=150" >> $GITHUB_ENV
          echo "PANDO_BUILD_DOCS=OFF" >> $GITHUB_ENV
          echo "PANDO_CONTAINER_ENV=-e=PANDO_PREP_L1SP_HART=16384 -e=PANDO_EXTRA_CXX_FLAGS=-fsanitize=address" >> $GITHUB_ENV
        elif [ ${{ matrix.sanitizer-type }} == 'ubsan' ]; then
          echo "PANDO_TEST_DISCOVERY_TIMEOUT=150" >> $GITHUB_ENV
          echo "PANDO_BUILD_DOCS=OFF" >> $GITHUB_ENV
          echo "PANDO_CONTAINER_ENV=-e=PANDO_PREP_L1SP_HART=16384 -e=PANDO_EXTRA_CXX_FLAGS=-fsanitize=undefined" >> $GITHUB_ENV
        fi

    - name: Log in to the Container registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/amdresearch/PANDO-lib-gal

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver-opts: network=host

    # - name: Build root Docker image
    #   uses: docker/build-push-action@v4
    #   with:
    #     context: ./pando-rt/docker
    #     push: false
    #     load: true
    #     file: ./pando-rt/docker/Dockerfile
    #     tags: "${{ env.ROOT_IMAGE_NAME }}:${{ env.ROOT_IMAGE_VERSION }}"
    #     build-args: |
    #       "SRC_DIR=${{ env.CONTAINER_SRC_DIR }}"
    #       "BUILD_DIR=${{ env.CONTAINER_BUILD_DIR }}"
    #     cache-from: type=registry,ref=${{ steps.meta.outputs.tags }}
    #     cache-to: type=registry,mode=max,ref=${{ steps.meta.outputs.tags }}

    - name: Build development Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        load: true
        file: ./Dockerfile.ci
        tags: "${{ env.IMAGE_NAME }}:${{ env.IMAGE_VERSION }}-${{ env.ROOT_IMAGE_VERSION }}"
        target: pando-lib-galois
        build-args: |
          "SRC_DIR=${{ env.CONTAINER_SRC_DIR }}"
          "BUILD_DIR=${{ env.CONTAINER_BUILD_DIR }}"
          "UNAME=${{ env.UNAME }}"
          "UID=${{ env.UID }}"
          "GID=${{ env.GID }}"
        #"BUILD_IMAGE=${{ env.ROOT_IMAGE_NAME }}:${{ env.ROOT_IMAGE_VERSION }}"
        cache-from: type=registry,ref=${{ steps.meta.outputs.tags }}
        cache-to: type=registry,mode=max,ref=${{ steps.meta.outputs.tags }}

    - name: Disable ASLR
      timeout-minutes: 1
      run: |
        echo 0 | sudo tee -a /proc/sys/kernel/randomize_va_space

    - name: Check pre-commit
      timeout-minutes: 10
      run: |
        IMAGE_NAME="${{ env.IMAGE_NAME }}" \
          VERSION="${{ env.IMAGE_VERSION }}-${{ env.ROOT_IMAGE_VERSION }}" \
          make docker-pre-commit

    - name: Configure
      timeout-minutes: 10
      run: |
        CONTAINER_CMD="make setup" \
          CONTAINER_OPTS="-e=BUILD_TYPE=${{ matrix.build-type }}" \
          IMAGE_NAME="${{ env.IMAGE_NAME }}" \
          VERSION="${{ env.IMAGE_VERSION }}-${{ env.ROOT_IMAGE_VERSION }}" \
          make docker

    - name: Build
      timeout-minutes: 10
      run: |
        CONTAINER_CMD="bash -c '. ~/spack_env && make -j8'" \
          IMAGE_NAME="${{ env.IMAGE_NAME }}" \
          VERSION="${{ env.IMAGE_VERSION }}-${{ env.ROOT_IMAGE_VERSION }}" \
          CONTAINER_WORKDIR="${{ env.CONTAINER_BUILD_DIR }}" \
          make docker

    - name: Run Smoke Test
      timeout-minutes: 10
      env:
        PANDO_PREP_LOG_LEVEL: warning
      run: |
        CONTAINER_CMD="bash scripts/run.sh" \
          IMAGE_NAME="${{ env.IMAGE_NAME }}" \
          VERSION="${{ env.IMAGE_VERSION }}-${{ env.ROOT_IMAGE_VERSION }}" \
          make docker

    - name: Run Tests
      timeout-minutes: 10
      env:
        PANDO_PREP_LOG_LEVEL: warning
      run: |
        CONTAINER_CMD="make run-tests" \
          IMAGE_NAME="${{ env.IMAGE_NAME }}" \
          VERSION="${{ env.IMAGE_VERSION }}-${{ env.ROOT_IMAGE_VERSION }}" \
          make docker
