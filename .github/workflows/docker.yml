# SPDX-License-Identifier: MIT
# Copyright (c) 2023. University of Texas at Austin. All rights reserved.

name: Docker / Ubuntu 22.04 / PREP / gasnet-smp-par
run-name: docker-prep-smp-ubuntu-2204 performed by @${{ github.triggering_actor }}

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prep-smp-ubuntu-2204-docker:
    name: gcc / ${{ matrix.build-type }} / ${{ matrix.sanitizer-type }}
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write
    env:
      REGISTRY: ghcr.io/amdresearch
      ROOT_IMAGE_NAME: pando-rt
      IMAGE_NAME: pando
      CONTAINER_SRC_DIR: "/pando"
      CONTAINER_BUILD_DIR: "/pando/dockerbuild"
      CONTAINER_WORK_DIR: "/pando"
      INTERACTIVE: ""
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        build-type: ['Release', 'RelWithDebInfo']
        sanitizer-type: ['nosan', 'asan', 'ubsan']
        exclude:
          - build-type: 'Release'
            sanitizer-type: 'asan'
          - build-type: 'Release'
            sanitizer-type: 'ubsan'

    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: 'true'
        submodules: recursive
        token: ${{ secrets.CI_PAT }}

    - name: Set up environment variables
      timeout-minutes: 1
      run: |
        echo "UNAME=$(whoami)" >> $GITHUB_ENV
        echo "UID=$(id -u)" >> $GITHUB_ENV
        echo "GID=$(id -g)" >> $GITHUB_ENV
        echo "SRC_DIR=$(pwd)" >> $GITHUB_ENV
        echo "IMAGE_VERSION=$(git log --pretty="%h" -1 Dockerfile.ci)" >> $GITHUB_ENV
        echo "ROOT_IMAGE_VERSION=$(cd pando-rt/ && git log --pretty="%h" -1 docker/Dockerfile)" >> $GITHUB_ENV
        if [ ${{ matrix.sanitizer-type }} == 'asan' ]; then
          echo "PANDO_TEST_DISCOVERY_TIMEOUT=150" >> $GITHUB_ENV
          echo "PANDO_BUILD_DOCS=OFF" >> $GITHUB_ENV
          echo "PANDO_CONTAINER_ENV=-e=PANDO_PREP_L1SP_HART=32768 -e=PANDO_EXTRA_CXX_FLAGS=-fsanitize=address" >> $GITHUB_ENV
        elif [ ${{ matrix.sanitizer-type }} == 'ubsan' ]; then
          echo "PANDO_TEST_DISCOVERY_TIMEOUT=150" >> $GITHUB_ENV
          echo "PANDO_BUILD_DOCS=OFF" >> $GITHUB_ENV
          echo "PANDO_CONTAINER_ENV=-e=PANDO_PREP_L1SP_HART=32768 -e=PANDO_EXTRA_CXX_FLAGS=-fsanitize=undefined" >> $GITHUB_ENV
        fi
        cat $GITHUB_ENV

    - name: Docker Load
      timeout-minutes: 10
      run: |
        docker load < docker/ci-image.tar.gz

    - name: Check pre-commit
      timeout-minutes: 10
      run: |
        IMAGE_NAME="${{ env.IMAGE_NAME }}" \
          VERSION="${{ env.IMAGE_VERSION }}-${{ env.ROOT_IMAGE_VERSION }}" \
          make docker-pre-commit

    - name: Configure
      timeout-minutes: 10
      run: |
        CONTAINER_CMD="make setup-ci" \
          CONTAINER_OPTS="-e=BUILD_TYPE=${{ matrix.build-type }}" \
          IMAGE_NAME="${{ env.IMAGE_NAME }}" \
          VERSION="${{ env.IMAGE_VERSION }}-${{ env.ROOT_IMAGE_VERSION }}" \
          make docker

    - name: Build
      timeout-minutes: 10
      run: |
        CONTAINER_CMD="setarch `uname -m` -R bash -c '. ~/spack_env && make -j`nproc` || make -j`nproc`'" \
          IMAGE_NAME="${{ env.IMAGE_NAME }}" \
          VERSION="${{ env.IMAGE_VERSION }}-${{ env.ROOT_IMAGE_VERSION }}" \
          CONTAINER_WORKDIR="${{ env.CONTAINER_BUILD_DIR }}" \
          make docker

    - name: Run Smoke Test
      timeout-minutes: 10
      env:
        PANDO_PREP_LOG_LEVEL: warning
      run: |
        mkdir -p data
        CONTAINER_CMD="setarch `uname -m` -R bash -c 'export HOST_THREADS=14 && . ~/spack_env && scripts/run.sh'" \
          IMAGE_NAME="${{ env.IMAGE_NAME }}" \
          VERSION="${{ env.IMAGE_VERSION }}-${{ env.ROOT_IMAGE_VERSION }}" \
          make docker

    - name: Run Tests
      timeout-minutes: 30
      env:
        PANDO_PREP_LOG_LEVEL: warning
      run: |
        CONTAINER_CMD="setarch `uname -m` -R make run-tests" \
          IMAGE_NAME="${{ env.IMAGE_NAME }}" \
          VERSION="${{ env.IMAGE_VERSION }}-${{ env.ROOT_IMAGE_VERSION }}" \
          make docker
