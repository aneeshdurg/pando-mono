# SPDX-License-Identifier: MIT
# Copyright (c) 2024 University of Washington

import pandas as pd
import argparse

memory_instrs = [
    'LB',
    'LH',
    'LW',
    'LBU',
    'LHU',
    'SB',
    'SH',
    'SW',
    'LWU',
    'LD',
    'SD',
    'LRW',
    'LRW',
    'LRW_AQ',
    'LRW_RL_AQ',
    'SCW',
    'SCW_RL',
    'SCW_AQ',
    'SCW_RL_AQ',
    'AMOSWAPW',
    'AMOSWAPW_RL',
    'AMOSWAPW_AQ',
    'AMOSWAPW_RL_AQ',
    'AMOADDW',
    'AMOADDW_RL',
    'AMOADDW_AQ',
    'AMOADDW_RL_AQ',
    'AMOXORW',
    'AMOXORW_RL',
    'AMOXORW_AQ',
    'AMOXORW_RL_AQ',
    'AMOANDW',
    'AMOANDW_RL',
    'AMOANDW_AQ',
    'AMOANDW_RL_AQ',
    'AMOORW',
    'AMOORW_RL',
    'AMOORW_AQ',
    'AMOORW_RL_AQ',
    'AMOMINW',
    'AMOMINW_RL',
    'AMOMINW_AQ',
    'AMOMINW_RL_AQ',
    'AMOMAXW',
    'AMOMAXW_RL',
    'AMOMAXW_AQ',
    'AMOMAXW_RL_AQ',
    'AMOMINUW',
    'AMOMINUW_RL',
    'AMOMINUW_AQ',
    'AMOMINUW_RL_AQ',
    'AMOMAXUW',
    'AMOMAXUW_RL',
    'AMOMAXUW_AQ',
    'AMOMAXUW_RL_AQ',
    'AMOCASW',
    'AMOCASW_RL',
    'AMOCASW_AQ',
    'AMOCASW_RL_AQ',
    'LRD',
    'LRD_RL',
    'LRD_AQ',
    'LRD_RL_AQ',
    'SCD',
    'SCD_RL',
    'SCD_AQ',
    'SCD_RL_AQ',
    'AMOSWAPD',
    'AMOSWAPD_RL',
    'AMOSWAPD_AQ',
    'AMOSWAPD_RL_AQ',
    'AMOADDD',
    'AMOADDD_RL',
    'AMOADDD_AQ',
    'AMOADDD_RL_AQ',
    'AMOXORD',
    'AMOXORD_RL',
    'AMOXORD_AQ',
    'AMOXORD_RL_AQ',
    'AMOANDD',
    'AMOANDD_RL',
    'AMOANDD_AQ',
    'AMOANDD_RL_AQ',
    'AMOORD',
    'AMOORD_RL',
    'AMOORD_AQ',
    'AMOORD_RL_AQ',
    'AMOMIND',
    'AMOMIND_RL',
    'AMOMIND_AQ',
    'AMOMIND_RL_AQ',
    'AMOMAXD',
    'AMOMAXD_RL',
    'AMOMAXD_AQ',
    'AMOMAXD_RL_AQ',
    'AMOMINUD',
    'AMOMINUD_RL',
    'AMOMINUD_AQ',
    'AMOMINUD_RL_AQ',
    'AMOMAXUD',
    'AMOMAXUD_RL',
    'AMOMAXUD_AQ',
    'AMOMAXUD_RL_AQ',
    'AMOCASD',
    'AMOCASD_RL',
    'AMOCASD_AQ',
    'AMOCASD_RL_AQ',
    'FLW',
    'FSW',
    'FLD',
    'FSD',
]
memory_instrs = [i + '_instruction' for i in memory_instrs]

integer_instrs = [
    'LUI',
    'AUIPC',
    'ADDI',
    'SLTI',
    'SLTIU',
    'XORI',
    'ORI',
    'ANDI',
    'ADD',
    'SUB',
    'SLL',
    'SLT',
    'SLTU',
    'XOR',
    'SRL',
    'SRA',
    'OR',
    'AND',
    'FENCE',
    'FENCE_I',
    'ECALL',
    'EBREAK',
    'MRET',
    'CSRRW',
    'CSRRS',
    'CSRRC',
    'CSRRWI',
    'CSRRSI',
    'CSRRCI',
    'SLLI',
    'SRLI',
    'SRAI',
    'ADDIW',
    'SLLIW',
    'SRLIW',
    'SRAIW',
    'ADDW',
    'SUBW',
    'SLLW',
    'SRLW',
    'SRAW',
    'MUL',
    'MULH',
    'MULHSU',
    'MULHU',
    'DIV',
    'DIVU',
    'REM',
    'REMU',
    'MULW',
    'DIVW',
    'DIVUW',
    'REMW',
    'REMUW',
]
integer_instrs = [i + '_instruction' for i in integer_instrs]

branch_instrs = [
    'JAL',
    'JALR',
    'BEQ',
    'BNE',
    'BLT',
    'BGE',
    'BLTU',
    'BGEU',
]
branch_instrs = [i + '_instruction' for i in branch_instrs]

float_instrs = [
    'FMADD_S_RNE',
    'FMADD_S_RTZ',
    'FMADD_S_RDN',
    'FMADD_S_RUP',
    'FMADD_S_RMM',
    'FMADD_S_DYN',
    'FMSUB_S_RNE',
    'FMSUB_S_RTZ',
    'FMSUB_S_RDN',
    'FMSUB_S_RUP',
    'FMSUB_S_RMM',
    'FMSUB_S_DYN',
    'FNMSUB_S_RNE',
    'FNMSUB_S_RTZ',
    'FNMSUB_S_RDN',
    'FNMSUB_S_RUP',
    'FNMSUB_S_RMM',
    'FNMSUB_S_DYN',
    'FNMADD_S_RNE',
    'FNMADD_S_RTZ',
    'FNMADD_S_RDN',
    'FNMADD_S_RUP',
    'FNMADD_S_RMM',
    'FNMADD_S_DYN',
    'FADD_S_RNE',
    'FADD_S_RTZ',
    'FADD_S_RDN',
    'FADD_S_RUP',
    'FADD_S_RMM',
    'FADD_S_DYN',
    'FSUB_S_RNE',
    'FSUB_S_RTZ',
    'FSUB_S_RDN',
    'FSUB_S_RUP',
    'FSUB_S_RMM',
    'FSUB_S_DYN',
    'FMUL_S_RNE',
    'FMUL_S_RTZ',
    'FMUL_S_RDN',
    'FMUL_S_RUP',
    'FMUL_S_RMM',
    'FMUL_S_DYN',
    'FDIV_S_RNE',
    'FDIV_S_RTZ',
    'FDIV_S_RDN',
    'FDIV_S_RUP',
    'FDIV_S_RMM',
    'FDIV_S_DYN',
    'FSQRT_S_RNE',
    'FSQRT_S_RTZ',
    'FSQRT_S_RDN',
    'FSQRT_S_RUP',
    'FSQRT_S_RMM',
    'FSQRT_S_DYN',
    'FSGNJ_S',
    'FSGNJN_S',
    'FSGNJX_S',
    'FMIN_S',
    'FMAX_S',
    'FCVT_W_S_RNE',
    'FCVT_W_S_RTZ',
    'FCVT_W_S_RDN',
    'FCVT_W_S_RUP',
    'FCVT_W_S_RMM',
    'FCVT_W_S_DYN',
    'FCVT_WU_S_RNE',
    'FCVT_WU_S_RTZ',
    'FCVT_WU_S_RDN',
    'FCVT_WU_S_RUP',
    'FCVT_WU_S_RMM',
    'FCVT_WU_S_DYN',
    'FMV_X_W',
    'FEQ_S',
    'FLE_S',
    'FLT_S',
    'FCLASS_S',
    'FCVT_S_W_RNE',
    'FCVT_S_W_RTZ',
    'FCVT_S_W_RDN',
    'FCVT_S_W_RUP',
    'FCVT_S_W_RMM',
    'FCVT_S_W_DYN',
    'FCVT_S_WU_RNE',
    'FCVT_S_WU_RTZ',
    'FCVT_S_WU_RDN',
    'FCVT_S_WU_RUP',
    'FCVT_S_WU_RMM',
    'FCVT_S_WU_DYN',
    'FMV_W_X',
    'FCVT_L_S_RNE',
    'FCVT_L_S_RTZ',
    'FCVT_L_S_RDN',
    'FCVT_L_S_RUP',
    'FCVT_L_S_RMM',
    'FCVT_L_S_DYN',
    'FCVT_LU_S_RNE',
    'FCVT_LU_S_RTZ',
    'FCVT_LU_S_RDN',
    'FCVT_LU_S_RUP',
    'FCVT_LU_S_RMM',
    'FCVT_LU_S_DYN',
    'FCVT_S_L_RNE',
    'FCVT_S_L_RTZ',
    'FCVT_S_L_RDN',
    'FCVT_S_L_RUP',
    'FCVT_S_L_RMM',
    'FCVT_S_L_DYN',
    'FCVT_S_LU_RNE',
    'FCVT_S_LU_RTZ',
    'FCVT_S_LU_RDN',
    'FCVT_S_LU_RUP',
    'FCVT_S_LU_RMM',
    'FCVT_S_LU_DYN',
    'FMADD_D_RNE',
    'FMADD_D_RTZ',
    'FMADD_D_RDN',
    'FMADD_D_RUP',
    'FMADD_D_RMM',
    'FMADD_D_DYN',
    'FMSUB_D_RNE',
    'FMSUB_D_RTZ',
    'FMSUB_D_RDN',
    'FMSUB_D_RUP',
    'FMSUB_D_RMM',
    'FMSUB_D_DYN',
    'FNMSUB_D_RNE',
    'FNMSUB_D_RTZ',
    'FNMSUB_D_RDN',
    'FNMSUB_D_RUP',
    'FNMSUB_D_RMM',
    'FNMSUB_D_DYN',
    'FNMADD_D_RNE',
    'FNMADD_D_RTZ',
    'FNMADD_D_RDN',
    'FNMADD_D_RUP',
    'FNMADD_D_RMM',
    'FNMADD_D_DYN',
    'FADD_D_RNE',
    'FADD_D_RTZ',
    'FADD_D_RDN',
    'FADD_D_RUP',
    'FADD_D_RMM',
    'FADD_D_DYN',
    'FSUB_D_RNE',
    'FSUB_D_RTZ',
    'FSUB_D_RDN',
    'FSUB_D_RUP',
    'FSUB_D_RMM',
    'FSUB_D_DYN',
    'FMUL_D_RNE',
    'FMUL_D_RTZ',
    'FMUL_D_RDN',
    'FMUL_D_RUP',
    'FMUL_D_RMM',
    'FMUL_D_DYN',
    'FDIV_D_RNE',
    'FDIV_D_RTZ',
    'FDIV_D_RDN',
    'FDIV_D_RUP',
    'FDIV_D_RMM',
    'FDIV_D_DYN',
    'FSQRT_D_RNE',
    'FSQRT_D_RTZ',
    'FSQRT_D_RDN',
    'FSQRT_D_RUP',
    'FSQRT_D_RMM',
    'FSQRT_D_DYN',
    'FSGNJ_D',
    'FSGNJN_D',
    'FSGNJX_D',
    'FMIN_D',
    'FMAX_D',
    'FCVT_S_D_RNE',
    'FCVT_S_D_RTZ',
    'FCVT_S_D_RDN',
    'FCVT_S_D_RUP',
    'FCVT_S_D_RMM',
    'FCVT_S_D_DYN',
    'FCVT_D_S_RNE',
    'FCVT_D_S_RTZ',
    'FCVT_D_S_RDN',
    'FCVT_D_S_RUP',
    'FCVT_D_S_RMM',
    'FCVT_D_S_DYN',
    'FEQ_D',
    'FLE_D',
    'FLT_D',
    'FCLASS_D',
    'FCVT_W_D_RNE',
    'FCVT_W_D_RTZ',
    'FCVT_W_D_RDN',
    'FCVT_W_D_RUP',
    'FCVT_W_D_RMM',
    'FCVT_W_D_DYN',
    'FCVT_WU_D_RNE',
    'FCVT_WU_D_RTZ',
    'FCVT_WU_D_RDN',
    'FCVT_WU_D_RUP',
    'FCVT_WU_D_RMM',
    'FCVT_WU_D_DYN',
    'FCVT_D_W_RNE',
    'FCVT_D_W_RTZ',
    'FCVT_D_W_RDN',
    'FCVT_D_W_RUP',
    'FCVT_D_W_RMM',
    'FCVT_D_W_DYN',
    'FCVT_D_WU_RNE',
    'FCVT_D_WU_RTZ',
    'FCVT_D_WU_RDN',
    'FCVT_D_WU_RUP',
    'FCVT_D_WU_RMM',
    'FCVT_D_WU_DYN',
    'FCVT_L_D_RNE',
    'FCVT_L_D_RTZ',
    'FCVT_L_D_RDN',
    'FCVT_L_D_RUP',
    'FCVT_L_D_RMM',
    'FCVT_L_D_DYN',
    'FCVT_LU_D_RNE',
    'FCVT_LU_D_RTZ',
    'FCVT_LU_D_RDN',
    'FCVT_LU_D_RUP',
    'FCVT_LU_D_RMM',
    'FCVT_LU_D_DYN',
    'FMV_X_D',
    'FCVT_D_L_RNE',
    'FCVT_D_L_RTZ',
    'FCVT_D_L_RDN',
    'FCVT_D_L_RUP',
    'FCVT_D_L_RMM',
    'FCVT_D_L_DYN',
    'FCVT_D_LU_RNE',
    'FCVT_D_LU_RTZ',
    'FCVT_D_LU_RDN',
    'FCVT_D_LU_RUP',
    'FCVT_D_LU_RMM',
    'FCVT_D_LU_DYN',
    'FMV_D_X',
]
float_instrs = [i + '_instruction' for i in float_instrs]

parser = argparse.ArgumentParser(description='Show opcode mix')
parser.add_argument('stats_csv', default='stats.csv', type=str, help='stats CSV')
parser.add_argument('tags_csv', default='stats.csv', type=str, help='stats CSV')

arguments = parser.parse_args()

data = pd.read_csv(arguments.stats_csv)

# keep just the instructions
intsruction_data = data[data['StatisticName'].str.endswith('_instruction')]
memoryop_data = data[data['StatisticName'].isin(memory_instrs)]
integerop_data = data[data['StatisticName'].isin(integer_instrs)]
floatop_data = data[data['StatisticName'].isin(float_instrs)]
branchop_data = data[data['StatisticName'].isin(branch_instrs)]

total = intsruction_data['Sum.u64'].sum()
print("Memory: {}, Integer: {}, Branch: {}, Float: {}".format(
    memoryop_data['Sum.u64'].sum()/total,
    integerop_data['Sum.u64'].sum()/total,
    branchop_data['Sum.u64'].sum()/total,
    floatop_data['Sum.u64'].sum()/total,
))
