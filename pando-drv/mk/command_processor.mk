# SPDX-License-Identifier: MIT
# Copyright (c) 2023 University of Washington
ifndef _COMMAND_PROCESSOR_MK_
_COMMAND_PROCESSOR_MK_ := 1

DRV_DIR ?= $(shell git rev-parse --show-toplevel)
include $(DRV_DIR)/mk/config.mk

TEST_DIR ?= $(PWD)

# Build options
COMMAND_PROCESSOR_CXX ?= clang++
COMMAND_PROCESSOR_CC  ?= clang

COMMAND_PROCESSOR_CXXFLAGS += $(COMMAND_PROCESSOR_COMPILE_FLAGS)
COMMAND_PROCESSOR_CXXFLAGS += $(APP_CXXFLAGS)
COMMAND_PROCESSOR_CLAGS    += $(COMMAND_PROCESSOR_COMPILE_FLAGS)
COMMAND_PROCESSOR_CFLAGS   += $(APP_CFLAGS)

COMMAND_PROCESSOR_LDFLAGS := $(APP_LDFLAGS)
COMMAND_PROCESSOR_LDFLAGS += -Wl,-rpath=$(PWD)

COMMAND_PROCESSOR_LIBS := $(APP_LIBS)

.PHONY: all commmandprocessor.clean

COMMAND_PROCESSOR_CSOURCE   ?=
COMMAND_PROCESSOR_CXXSOURCE ?=
COMMAND_PROCESSOR_COBJECT   := $(COMMAND_PROCESSOR_CSOURCE:.c=.o)
COMMAND_PROCESSOR_CXXOBJECT := $(COMMAND_PROCESSOR_CXXSOURCE:.cpp=.o)

COMMAND_PROCESSOR_TARGET := commandprocessor.so

all: $(COMMAND_PROCESSOR_TARGET)

# clean rule
commandprocessor.clean:
  rm -f $(COMMAND_PROCESSOR_TARGET) $(COMMAND_PROCESSOR_CXXOBJECT)

clean: commandprocessor.clean

# generic object file build rule
$(COMMAND_PROCESSOR_CXXOBJECT): %.o: %.cpp
  $(COMMAND_PROCESSOR_CXX) $(COMMAND_PROCESSOR_CXXFLAGS) -c -o $@ $<

$(COMMAND_PROCESSOR_COBJECT): %.o: %.c
  $(COMMAND_PROCESSOR_CC) $(COMMAND_PROCESSOR_CFLAGS) -c -o $@ $<

# build the app as a shared object
$(COMMAND_PROCESSOR_TARGET): $(COMMAND_PROCESSOR_CXXOBJECT) $(COMMAND_PROCESSOR_COBJECT)
  $(COMMAND_PROCESSOR_CXX) $(COMMAND_PROCESSOR_CXXFLAGS) -o $@ $(filter %.o,$^) \
  $(COMMAND_PROCESSOR_LDFLAGS) $(COMMAND_PROCESSOR_LIBS)

SIM_OPTIONS += --with-command-processor=$(TEST_DIR)/$(COMMAND_PROCESSOR_TARGET)
run: $(COMMAND_PROCESSOR_TARGET)
endif
